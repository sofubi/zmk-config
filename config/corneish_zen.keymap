/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/
/*
* Mapped using https://nickcoutsos.github.io/keymap-editor/
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    chosen {
        // zmk,physical-layout = &foostan_corne_6col_layout;

        zmk,matrix_transform = &five_column_transform;
    };
};

#define LEFT_KEYS 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define RIGHT_KEYS 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 21 22 23 // include cut/copy/paste so those remain fast
#define THUMB_KEYS 30 31 32 33 34 35

/ {
    behaviors {
        lhs: left_homerow_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HOMEROW_SHIFT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <RIGHT_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
        };

        rhs: right_homerow_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HOMEROW_SHIFT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <LEFT_KEYS THUMB_KEYS>;
            hold-trigger-on-release;
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";

            // --------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
  &kp Q         &kp W        &kp E       &kp R       &kp T       &kp Y        &kp U       &kp I           &kp O          &kp P
  &lhs LSHFT A  &lt 5 S      &lt 1 D     &lt 3 F     &kp G       &kp H        &lt 4 J     &lt 2 K         &lt 6 L        &rhs RSHFT SEMICOLON
  &kp Z         &mt LCTRL X  &mt LGUI C  &mt LALT V  &kp B       &kp N        &mt LALT M  &mt LGUI COMMA  &mt LCTRL DOT  &kp FSLH
                             &kp LGUI    &kp TAB     &kp BSPC    &lt 7 SPACE  &kp ENTER   &kp RALT
            >;
        };

        mouse {
            bindings = <
  &trans  &trans    &trans  &trans    &trans    &trans  &mkp MB1        &msc SCRL_UP    &mkp MB2         &trans
  &trans  &mkp MB2  &none   &mkp MB1  &trans    &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP     &mmv MOVE_RIGHT
  &trans  &trans    &trans  &trans    &trans    &trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &trans
                    &trans  &trans    &trans    &trans  &trans          &trans
            >;
        };

        nav {
            bindings = <
  &trans    &trans    &kp PG_UP  &trans     &trans    &trans  &trans        &trans  &trans        &trans
  &kp LEFT  &kp UP    &kp DOWN   &kp RIGHT  &trans    &trans  &kp LEFT_GUI  &none   &kp LC(LALT)  &kp LC(LA(LSHFT))
  &trans    &kp HOME  &kp PG_DN  &kp END    &trans    &trans  &trans        &trans  &trans        &trans
                      &trans     &trans     &trans    &trans  &trans        &trans
            >;
        };

        rsym {
            bindings = <
  &trans     &trans    &trans    &trans  &trans    &trans    &kp UNDER  &kp PIPE  &kp SINGLE_QUOTE   &trans
  &kp CARET  &kp STAR  &kp AMPS  &none   &trans    &kp HASH  &kp TILDE  &kp FSLH  &kp DOUBLE_QUOTES  &kp DOLLAR
  &trans     &trans    &trans    &trans  &trans    &trans    &kp MINUS  &kp BSLH  &kp GRAVE          &trans
                       &trans    &trans  &trans    &trans    &trans     &trans
            >;
        };

        lsym {
            bindings = <
  &trans    &kp COLON  &kp LT    &kp GREATER_THAN  &kp SEMI    &trans  &trans  &trans     &trans    &trans
  &kp LBRC  &kp RBRC   &kp LPAR  &kp RPAR          &kp AT      &trans  &none   &kp EQUAL  &kp PLUS  &kp PERCENT
  &trans    &kp EXCL   &kp LBKT  &kp RBKT          &trans      &trans  &trans  &trans     &trans    &trans
                       &trans    &trans            &trans      &trans  &trans  &trans
            >;
        };

        func {
            bindings = <
  &trans  &trans  &trans        &trans  &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F10
  &trans  &none   &kp LC(LALT)  &trans  &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11
  &trans  &trans  &trans        &trans  &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F12
                  &trans        &trans  &trans    &trans  &trans  &trans
            >;
        };

        num {
            bindings = <
  &kp FSLH  &kp N7  &kp N8  &kp N9  &kp PLUS     &trans  &trans  &trans  &trans  &trans
  &kp N0    &kp N4  &kp N5  &kp N6  &kp MINUS    &trans  &trans  &trans  &none   &trans
  &kp STAR  &kp N1  &kp N2  &kp N3  &kp EQUAL    &trans  &trans  &trans  &trans  &trans
                    &trans  &trans  &trans       &trans  &trans  &trans
            >;
        };

        layer_7 {
            bindings = <
  &trans  &trans     &kp COLON  &kp ESC    &trans     &trans      &trans         &trans          &trans         &kp DELETE
  &trans  &kp PRCNT  &kp FSLH   &kp ENTER  &trans     &trans      &kp LEFT_META  &trans          &trans         &trans
  &trans  &trans     &trans     &kp EXCL   &trans     &bt BT_CLR  &trans         &mt RALT COMMA  &mt RCTRL DOT  &bootloader
                     &trans     &trans     &kp TAB    &none       &bt BT_PRV     &bt BT_NXT
            >;
        };
    };
};
